@startuml
class Calculation <<static>> {
    + {static} TargetDistance(targetPos:Vector3, myPos:Vector3) : float
    + {static} TargetDirectionAngle(targetPos:Vector3, shooterPos:Vector3) : int
    + {static} CirclePosCalculate(shooterPos:Vector3, angle:float, radius:float) : Vector3
}

class MonoBehaviour{
}

package Game
{
    MonoBehaviour <|-- GameManager
    GameManager +-- GameState

    class GameManager {
        + OnPose() : void
    }

    enum GameState {
        Start,
        Pose,
        Play,
        Score,
        End,
    }
}

interface IObjectPool {
}
interface IDamageable {
}
interface IEnemyList {
}
interface IPlayerPos {
}
IPlayerPos --> "PlayerPos" Vector3

package Bullet
{
    MonoBehaviour <|-- Bullet
    MonoBehaviour <|-- BulletPool

    Bullet -> IPlayerPos
    Bullet -> IEnemyList
    Bullet --> "SettingShooterType" ShooterType
    Bullet --> "SettingMoveType" MoveType
    Bullet +-- ShooterType
    Bullet +-- MoveType

    class Bullet {
        + SettingBulletNumber : int <<set>>
        + Initialize() : void
    }
    enum ShooterType {
        None,
        Player,
        Enemy,
    }
    enum MoveType {
        Line,
        Tracking,
        Curve,
    }

    IObjectPool <|-- BulletPool

    class BulletPool {
        + LendPlayer(shotPos:Vector3, bulletNumber:int) : Bullet
        + LendEnemy(shotPos:Vector3, bulletNumber:int) : Bullet
        + ReturnPool(bullet:Bullet, bulletNumber:int) : void
    }
}

package Particle
{
    MonoBehaviour <|-- BulletParticle
    MonoBehaviour <|-- ParticlePool

    BulletParticle --> "ReturnParticleCallBack" ReturnParticle
    BulletParticle --> "SettingParticleType" ParticleType
    BulletParticle +-- ParticleType

    class BulletParticle {
        + ParticleNumber : int <<set>>
        + Play() : void
    }
    enum ParticleType {
        None,
        Player,
        Enemy,
    }

    IObjectPool <|-- ParticlePool

    class ParticlePool {
        + LendPlayer(startPos:Vector3, particleNumber:int) : BulletParticle
        + LendEnemy(startPos:Vector3, bulletNumber:int) : BulletParticle
        + ReturnPool(bulletParticle:BulletParticle, particleNumber:int) : void
    }
}

package Item
{
    MonoBehaviour <|-- ScoreItem
    MonoBehaviour <|-- ItemPool

    class ScoreItem {
    }

    ScoreItem --> "RturnPoolCallBack" ReturnPool
    IObjectPool <|-- ItemPool

    class ItemPool {
        + LendItem(startPos:Vector3) : void
        + ReturnPool(item:Item) : void
    }
}

package Enemy
{
    MonoBehaviour <|-- EnemyBase
    MonoBehaviour <|-- EnemyManager

    class "List`1"<T> {
    }

    IEnemyList <|-- EnemyManager

    EnemyManager --> "EnemyPhaseList<List<GameObject>>" "List`1"
    EnemyManager --> "EnemyIDamageableList<List<IDamageable>>" "List`1"
    EnemyManager --> "NowPhaseState" PhaseState
    EnemyManager +-- PhaseState

    class EnemyManager {
        + DownEnemyCount(enemy:GameObject) : void
    }
    enum PhaseState {
        First= 0,
        Second= 1,
        Third= 2,
        Boss= 3,
        End= 4,
    }

    IDamageable <|-- EnemyBase
    EnemyBase -> IPlayerPos

    EnemyBase <|-- RedSlime
    EnemyBase <|-- BlueSlime
    EnemyBase <|-- PurpleSlime
    EnemyBase <|-- YellowSlime
    EnemyBase <|-- BossSlime

    class EnemyBase {
        + Damage() : void
    }
    class EnemyMove {
        + SetSplineContainer(splineIndex:int) : void
        + DifferencePosInitialize(enemyPos:Vector3) : void
        + NextMovePos() : Vector3
    }
    class EnemyShot {
        + EnemyShot(bulletPool:IObjectPool<Bullet>, radius:float)
        + LineShot(shooterPos:Vector3, angle:float, bulletNumber:int, moveType:Bullet.MoveType) : void
        + FanShot(shooterPos:Vector3, centerAngle:float, angleSplit:float, angleWidth:int, bulletNumber:int, moveType:Bullet.MoveType) : void
        + RoundShot(shooterPos:Vector3, angleSplit:float, shiftAngle:float, bulletNumber:int, moveType:Bullet.MoveType) : void
    }

    class RedSlime {
    }
    class BlueSlime {
    }
    class YellowSlime {
    }
    class PurpleSlime {
    }
    class BossSlime {
    }
}

class "List`1"<T> {
}
IEnemyList --> "EnemyPhaseList<List<GameObject>>" "List`1"
IEnemyList --> "EnemyIDamageableList<List<IDamageable>>" "List`1"

package PlayerManager
{
    MonoBehaviour <|-- Player

    IDamageable <|-- Player
    IPlayerPos <|-- Player
    Player --> "PlayerPos" Vector3

    class Player {
        + Damage() : void
    }
}

package ScriptableObjectGroup
{
    ScriptableObject <|-- BarrageTemplate
    ScriptableObject <|-- BulletInfo
    ScriptableObject <|-- EnemyData
    ScriptableObject <|-- EnemyDataBase

    class BarrageTemplate {
        + TargetAngle : float <<get>>
        + AngleWidth : int <<get>>
        + AngleSplit : int <<get>>
    }
    enum BarrageType {
    }
    
    BarrageTemplate +-- BarrageType
    class BulletInfo {
        + <<readonly>> RED_NOMAL_BULLET : int = 0
        + <<readonly>> RED_NEEDLE_BULLET : int = 1
        + <<readonly>> BLUE_NOMAL_BULLET : int = 2
        + <<readonly>> BLUE_NEEDLE_BULLET : int = 3
        + <<readonly>> YERROW_NOMAL_BULLET : int = 4
        + <<readonly>> YERROW_NEEDLE_BULLET : int = 5
        + <<readonly>> GREEN_NOMAL_BULLET : int = 6
        + <<readonly>> GREEN_NEEDLE_BULLET : int = 7
        + <<readonly>> PURPLE_NOMAL_BULLET : int = 8
        + <<readonly>> PURPLE_NEEDLE_BULLET : int = 9
    }
    
    class EnemyData {
        + _enemyName : string = default
        + _maxHp : int = 0
        + _splineIndex : int = 0
    }
    
    class EnemyDataBase {
        + <<readonly>> RED_SLIME : int = 0
        + <<readonly>> BLUE_SLIME : int = 1
        + <<readonly>> YELLOW_SLIME : int = 2
        + <<readonly>> GREEN_SLIME : int = 3
        + <<readonly>> PURPLE_SLIME : int = 4
        + <<readonly>> BOSS_SLIME : int = 5
    }
    class "List`1"<T> {
    }
    
    EnemyDataBase o-> "_enemyDataList<EnemyData>" "List`1"
}
@enduml
